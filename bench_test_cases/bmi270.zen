BMI270 = Module("@github/diodeinc/registry:cce227d/reference/BMI270x/BMI270x.zen")

def print_info_verbose(nets: dict[str, list[str]], ports: dict[str, str], components: dict[str, dict[str, str]]) -> bool:
    print("Nets and their connected ports:")
    for (net_name, port_list) in nets.items():
        print(f"  {net_name}: {port_list}")
    print("Ports and their nets:")
    for (port_name, net_name) in ports.items():
        print(f"  {port_name} -> {net_name}")
    print("Components and their attributes:")
    for (comp_name, attrs) in components.items():
        print(f"  {comp_name}: {attrs}")
    return True

def print_info(nets: dict[str, list[str]], ports: dict[str, str], components: dict[str, dict[str, str]]) -> bool:
    print("BMI270 Circuit Analysis:")
    comp_count = len(components)
    net_count = len(nets)
    port_count = len(ports)
    print("  Components: " + str(comp_count))
    print("  Nets: " + str(net_count))
    print("  Port connections: " + str(port_count))
    return True

def check_power_decoupling(nets: dict[str, list[str]], ports: dict[str, str], components: dict[str, dict[str, str]]) -> bool:
    """Verify that capacitors properly connect power to ground"""
    # Find capacitors that have one pin on VDD and another on GND
    decoupling_caps = []
    
    for comp_name, attrs in components.items():
        if "C" in comp_name and attrs.get("Type") == "capacitor":
            # Check if this capacitor has pins on both VDD and GND
            pins = attrs.get("Pins", "").split(",")
            power_pin = None
            ground_pin = None
            
            for pin in pins:
                if pin.strip():
                    full_pin_name = comp_name + "." + pin.strip()
                    net = ports.get(full_pin_name)
                    if net and "vdd_VCC" in net:
                        power_pin = pin.strip()
                    elif net and "gnd_GND" in net:
                        ground_pin = pin.strip()
            
            if power_pin and ground_pin:
                value = attrs.get("Value", attrs.get("Capacitance", "unknown"))
                decoupling_caps.append(comp_name + " (" + value + ")")
    
    if len(decoupling_caps) >= 2:
        print("✓ Power decoupling: " + str(len(decoupling_caps)) + " capacitors properly connecting VDD to GND")
        for cap in decoupling_caps:
            print("    " + cap)
        return True
    else:
        print("✗ Insufficient power decoupling: only " + str(len(decoupling_caps)) + " capacitors connecting VDD to GND")
        return False

def check_bmi270_power_pins(nets: dict[str, list[str]], ports: dict[str, str], components: dict[str, dict[str, str]]) -> bool:
    """Verify BMI270 power pins are properly connected"""
    # Check VDD and VDDIO are connected to power
    vdd_net = ports.get("BMI270.BMI270.VDD")
    vddio_net = ports.get("BMI270.BMI270.VDDIO")
    
    if vdd_net and "vdd_VCC" in vdd_net:
        print("✓ BMI270 VDD connected to power rail")
    else:
        print("✗ BMI270 VDD not properly connected")
        return False
        
    if vddio_net and "vdd_VCC" in vddio_net:
        print("✓ BMI270 VDDIO connected to power rail")
    else:
        print("✗ BMI270 VDDIO not properly connected")
        return False
    
    # Check ground connections
    gnd_net = ports.get("BMI270.BMI270.GND")
    gndio_net = ports.get("BMI270.BMI270.GNDIO")
    
    if gnd_net and "gnd_GND" in gnd_net and gndio_net and "gnd_GND" in gndio_net:
        print("✓ BMI270 ground pins properly connected")
        return True
    else:
        print("✗ BMI270 ground pins not properly connected")
        return False

def check_communication_interfaces(nets: dict[str, list[str]], ports: dict[str, str], components: dict[str, dict[str, str]]) -> bool:
    """Verify I2C and SPI interface pins are available"""
    # Check I2C pins
    scl_net = ports.get("BMI270.BMI270.SCX")
    sda_net = ports.get("BMI270.BMI270.SDX")
    
    if scl_net and sda_net:
        print("✓ I2C interface available (SCL, SDA)")
    else:
        print("✗ I2C interface incomplete")
        return False
    
    # Check SPI pins
    cs_pins = ["BMI270.BMI270.CSB", "BMI270.BMI270.OCSB"]
    cs_connected = True
    for pin in cs_pins:
        if pin not in ports:
            cs_connected = False
            break
    
    if cs_connected:
        print("✓ SPI chip select pins available")
    else:
        print("✗ SPI chip select pins not connected")
        return False
    
    return True


TestBench(
    name="BMI270",
    module=BMI270,
    checks = [
        print_info_verbose,
        print_info,
        check_power_decoupling,
        check_bmi270_power_pins,
        check_communication_interfaces,
    ],
)
