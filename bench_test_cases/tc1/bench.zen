Foo = Module("./module.zen")

def print_info(nets: dict[str, list[str]], ports: dict[str, str], components: dict[str, dict[str, str]]):
    print("Nets and their connected ports:")
    for (net_name, port_list) in nets.items():
        print(f"  {net_name}: {port_list}")
    print("Ports and their nets:")
    for (port_name, net_name) in ports.items():
        print(f"  {port_name} -> {net_name}")
    print("Components and their attributes:")
    for (comp_name, attrs) in components.items():
        print(f"  {comp_name}: {attrs}")

def ensure_gnd(nets: dict[str, list[str]], ports: dict[str, str], components: dict[str, dict[str, str]]):
    for net_name in nets.keys():
        if "GND" in net_name:
            return
    error("GND net not found")

def check_power_connections(nets: dict[str, list[str]], ports: dict[str, str], components: dict[str, dict[str, str]]):
    """Check that VCC net has at least 2 connections (components properly powered)"""
    for (net_name, port_list) in nets.items():
        if "VCC" in net_name:
            check(len(port_list) >= 2, "VCC net must have at least 2 connections")

def check_resistor_grounding(nets: dict[str, list[str]], ports: dict[str, str], components: dict[str, dict[str, str]]):
    """Check that resistor R.P2 is connected to ground using ports dict"""
    resistor_p2 = "R.R.P2"
    if resistor_p2 in ports:
        connected_net = ports[resistor_p2]
        check("GND" in connected_net, "Resistor P2 is connected to " + connected_net + ", not ground!")

def check_resistor_values(nets: dict[str, list[str]], ports: dict[str, str], components: dict[str, dict[str, str]]):
    """Check that resistors have valid values using components dict"""
    for (comp_name, attrs) in components.items():
        if "R" in comp_name:  # Is a resistor
            # Check for various value attribute names
            value = None
            if "value" in attrs:
                value = attrs["value"]
            elif "Value" in attrs:
                value = attrs["Value"]
            elif "Resistance" in attrs:
                value = attrs["Resistance"]
            
            if value:
                print("âœ“ " + comp_name + " has resistance: " + value)
            else:
                error("Missing resistance value for " + comp_name)

TestBench(
    name="FOO",
    module=Foo,
    checks=[
        print_info,
        ensure_gnd,
        check_resistor_grounding,
        check_resistor_values,
        check_power_connections,
    ],
)
