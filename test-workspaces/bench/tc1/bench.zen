Foo = Module("./module.zen")

def print_info(module: Module):
    nets = module.nets()
    components = module.components()
    print("Nets and their connected ports:")
    for (net_name, port_list) in nets.items():
        print(f"  {net_name}: {port_list}")
    print("Components and their attributes:")
    for (comp_name, comp) in components.items():
        print(f"  {comp_name}:")
        print("    Name:", comp.name)
        print("    Prefix:", comp.prefix)
        if comp.mpn:
            print("    MPN:", comp.mpn)
        if comp.type:
            print("    Type:", comp.type)
        if comp.type == "capacitor":
            print("    Capacitance:", comp.capacitance.__str__(comp.capacitance))
        elif comp.type == "resistor":
            print("    Resistance:", comp.resistance.__str__(comp.resistance))
        print("    Properties:", comp.properties)
        pins = {}
        for (pin, net) in comp.pins.items():
            pins[pin] = net.name
        print("    Pins:", pins)

def ensure_gnd(module):
    nets = module.nets()
    for net_name in nets.keys():
        if "GND" in net_name:
            return
    error("GND net not found")

def check_power_connections(module):
    """Check that VCC nets have at least 2 connections total (components properly powered)"""
    nets = module.nets()
    for (net_name, port_list) in nets.items():
        if "VCC" in net_name:
            check(len(port_list) >= 2, "VCC net must have at least 2 connections")

def check_resistor_grounding(module):
    """Check that resistor R.P2 is connected to ground using ports dict"""
    components = module.components()
    connected_net = components["R.R"].pins["P2"].name
    check("GND" in connected_net, "Resistor P2 is connected to " + connected_net + ", not ground!")

def check_resistor_values(module):
    """Check that resistors have valid values using components dict"""
    components = module.components()
    for (comp_name, comp) in components.items():
        if comp.type == "resistor":
            resistance = comp.resistance
            print("âœ“ " + comp_name + " has resistance: " + resistance.__str__(resistance))

TestBench(
    name="FOO",
    module=Foo,
    checks=[
        print_info,
        ensure_gnd,
        check_resistor_grounding,
        check_resistor_values,
        check_power_connections,
    ],
)
