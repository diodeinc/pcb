BMI270 = Module("@github/diodeinc/registry:v0.1.0/reference/BMI270x/BMI270x.zen")

def print_info(module: Module):
    print("Nets and their connected ports:")
    for (net_name, port_list) in module.nets.items():
        print(f"  {net_name}: {port_list}")
    print("Components and their attributes:")
    for (comp_name, comp) in module.components.items():
        print(f"  {comp_name}:")
        print("    Name:", comp.name)
        print("    Prefix:", comp.prefix)
        if comp.mpn:
            print("    MPN:", comp.mpn)
        if comp.type:
            print("    Type:", comp.type)
        if comp.type == "capacitor":
            print("    Capacitance:", comp.capacitance.__str__(comp.capacitance))
        elif comp.type == "resistor":
            print("    Resistance:", comp.resistance.__str__(comp.resistance))
        print("    Properties:", comp.properties)
        pins = {}
        for (pin, net) in comp.pins.items():
            pins[pin] = net.name
        print("    Pins:", pins)

def check_power_decoupling(module):
    """Verify that capacitors properly connect power to ground"""
    # Find capacitors that have one pin on VDD and another on GND
    decoupling_caps = []
    
    for comp_name, comp in module.components.items():
        if comp.type != "capacitor":
            continue
        # Check if this capacitor has pins on both VDD and GND
        power_pin = None
        ground_pin = None
        
        for (pin, net) in comp.pins.items():
            if "VCC" in net.name:
                power_pin = pin
            elif "GND" in net.name:
                ground_pin = pin
        
        if power_pin and ground_pin:
            capacitance_str = comp.capacitance.__str__(comp.capacitance)
            decoupling_caps.append(comp_name + " (" + capacitance_str + ")")
    
    if len(decoupling_caps) >= 2:
        print("✓ Power decoupling: " + str(len(decoupling_caps)) + " capacitors properly connecting VDD to GND")
        for cap in decoupling_caps:
            print("    " + cap)
    else:
        error("Insufficient power decoupling: only " + str(len(decoupling_caps)) + " capacitors connecting VDD to GND")

def check_bmi270_power_pins(module):
    """Verify BMI270 power pins are properly connected"""
    # Check VDD and VDDIO are connected to power
    comp = module["BMI270"]["BMI270"]
    if "VCC" not in comp.pins["VDD"].name:
        error("BMI270 VDD not connected to power")
    if "VCC" not in comp.pins["VDDIO"].name:
        error("BMI270 VDDIO not connected to power")
    if "GND" not in comp.pins["GND"].name:
        error("BMI270 GND not connected to ground")
    if "GND" not in comp.pins["GNDIO"].name:
        error("BMI270 GNDIO not connected to ground")

def check_communication_interfaces(module):
    """Verify I2C and SPI interface pins are available"""
    # Check I2C pins
    comp = module["BMI270.BMI270"]
    scl_net = comp.pins.get("SCX")
    sda_net = comp.pins.get("SDX")

    if scl_net and sda_net:
        print("✓ I2C interface available (SCL, SDA)")
    else:
        error("I2C interface incomplete")
    
    # Check SPI pins
    cs_pins = ["CSB", "OCSB"]
    for pin in cs_pins:
        if pin not in comp.pins:
            error("SPI chip select pins not connected")

TestBench(
    name="BMI270",
    module=BMI270,
    checks = [
        print_info,
        check_power_decoupling,
        check_bmi270_power_pins,
        check_communication_interfaces,
    ],
)
